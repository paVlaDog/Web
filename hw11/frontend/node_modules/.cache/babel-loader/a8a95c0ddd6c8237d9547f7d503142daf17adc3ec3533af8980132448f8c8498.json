{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: [],\n      comments: [],\n      board: [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n    axios.get(\"/api/1/comments\").then(response => {\n      this.comments = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onRegister\", (login, nameUser, password) => {\n      if (!this.user) {\n        if (!login || login.trim().length < 2 || login.length > 24) {\n          this.$root.$emit(\"onRegisterValidationError\", \"Login length from 2 to 24\");\n        } else if (Object.values(this.users).map(u => u.login).includes(login)) {\n          this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n        } else if (!nameUser || nameUser.trim().length < 1 || nameUser.length > 100) {\n          this.$root.$emit(\"onRegisterValidationError\", \"Name length from 1 to 100\");\n        } else if (!password || password.trim().length < 4 || password.length > 12) {\n          this.$root.$emit(\"onRegisterValidationError\", \"Password length from 4 to 12\");\n        } else {\n          axios.post(\"/api/1/users\", {\n            login,\n            name: nameUser,\n            password\n          }).then(response => {\n            axios.get(\"/api/1/users\").then(response => {\n              this.users = response.data;\n            }).then(() => {\n              localStorage.setItem(\"jwt\", response.data);\n              this.$root.$emit(\"onJwt\", response.data);\n            });\n          }).catch(error => {\n            this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onRegisterValidationError\", \"You already log in\");\n      }\n    });\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.user) {\n        if (!title || text.length < 1 || text.length > 100) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n        } else if (!text || text.length < 1 || text.length > 10000) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n        } else {\n          axios.post(\"/api/1/posts\", {\n            title,\n            text,\n            user: this.user\n          }).then(() => {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            }).then(() => {\n              this.$root.$emit(\"onChangePage\", \"Index\");\n            });\n          }).catch(error => {\n            this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onWriteComment\", (text, post) => {\n      if (this.user) {\n        if (!text || text.trim().length < 1) {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"Text is empty!\");\n        } else {\n          axios.post(\"/api/1/comments\", {\n            text,\n            post,\n            user: this.user\n          }).then(() => {\n            axios.get(\"/api/1/comments\").then(response => {\n              this.comments = response.data;\n            }).then(() => {\n              this.$root.$emit(\"onLinkToPostPage\", post);\n            });\n          }).catch(error => {\n            this.$root.$emit(\"onWriteCommentValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n      }\n    });\n  }\n};","map":{"version":3,"mappings":"AASA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA;IAEAC;MACA;IACA;IAEAA;MACA;IACA;IAEAA;MACA;IACA;EACA;EACAC;IACA;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACAD;YACAE;YAAAd;YAAAe;UACA;YACAH;cACA;YACA;cACAI;cACA;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;IAEA;MACA;QACA;QACA;MACA;MAEAJ;QACAE;QAAAC;MACA;QACAC;QACA;MACA;QACA;MACA;IACA;IAEA;MACAA;MAEAJ;QACAK;UACAC;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;MACAF;MACA;IACA;IAEA;MACA;QACA;UACA;QACA;UACA;QACA;UACAJ;YACAO;YAAAC;YAAAd;UACA;YACAM;cACA;YACA;cACA;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;IAEA;MACA;QACA;UACA;QACA;UACAA;YACAQ;YAAAC;YAAAf;UACA;YACAM;cACA;YACA;cACA;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;EAEA;AACA","names":["name","components","Footer","Middle","Header","data","user","posts","users","comments","board","beforeMount","axios","beforeCreate","login","password","localStorage","params","jwt","title","text","post"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :board=\"board\" :user=\"user\" :posts=\"posts\" :users=\"users\" :comments=\"comments\"/>\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return {\n            user: null,\n            posts: [],\n            users: [],\n            comments: [],\n            board: [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]\n        }\n    },\n    beforeMount() {\n      if (localStorage.getItem(\"jwt\") && !this.user) {\n          this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n      }\n\n      axios.get(\"/api/1/posts\").then(response => {\n          this.posts = response.data;\n      });\n\n      axios.get(\"/api/1/users\").then(response => {\n        this.users = response.data;\n      });\n\n      axios.get(\"/api/1/comments\").then(response => {\n        this.comments = response.data;\n      });\n    },\n    beforeCreate() {\n      this.$root.$on(\"onRegister\", (login, nameUser, password) => {\n        if (!this.user) {\n          if (!login || login.trim().length < 2 || login.length > 24) {\n            this.$root.$emit(\"onRegisterValidationError\", \"Login length from 2 to 24\");\n          } else if (Object.values(this.users).map(u => u.login).includes(login)) {\n            this.$root.$emit(\"onRegisterValidationError\", \"Login is required\");\n          } else if (!nameUser || nameUser.trim().length < 1 || nameUser.length > 100) {\n            this.$root.$emit(\"onRegisterValidationError\", \"Name length from 1 to 100\");\n          } else if (!password || password.trim().length < 4 || password.length > 12) {\n            this.$root.$emit(\"onRegisterValidationError\", \"Password length from 4 to 12\");\n          } else {\n            axios.post(\"/api/1/users\", {\n              login, name: nameUser, password\n            }).then(response => {\n              axios.get(\"/api/1/users\").then(response => {\n                this.users = response.data;\n              }).then(() => {\n                localStorage.setItem(\"jwt\", response.data);\n                this.$root.$emit(\"onJwt\", response.data);\n              });\n            }).catch(error => {\n              this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n            });\n          }\n        } else {\n          this.$root.$emit(\"onRegisterValidationError\", \"You already log in\");\n        }\n      });\n\n      this.$root.$on(\"onEnter\", (login, password) => {\n          if (password === \"\") {\n              this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n              return;\n          }\n\n          axios.post(\"/api/1/jwt\", {\n                  login, password\n          }).then(response => {\n              localStorage.setItem(\"jwt\", response.data);\n              this.$root.$emit(\"onJwt\", response.data);\n          }).catch(error => {\n              this.$root.$emit(\"onEnterValidationError\", error.response.data);\n          });\n      });\n\n      this.$root.$on(\"onJwt\", (jwt) => {\n        localStorage.setItem(\"jwt\", jwt);\n\n        axios.get(\"/api/1/users/auth\", {\n          params: {\n            jwt\n          }\n        }).then(response => {\n          this.user = response.data;\n          this.$root.$emit(\"onChangePage\", \"Index\");\n        }).catch(() => this.$root.$emit(\"onLogout\"))\n      });\n\n      this.$root.$on(\"onLogout\", () => {\n        localStorage.removeItem(\"jwt\");\n        this.user = null;\n      });\n\n      this.$root.$on(\"onWritePost\", (title, text) => {\n        if (this.user) {\n          if (!title || text.length < 1 || text.length > 100) {\n            this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n          } else if (!text || text.length < 1 || text.length > 10000) {\n            this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n          } else {\n            axios.post(\"/api/1/posts\", {\n              title, text, user: this.user\n            }).then(() => {\n              axios.get(\"/api/1/posts\").then(response => {\n                this.posts = response.data;\n              }).then(() => {\n                this.$root.$emit(\"onChangePage\", \"Index\");\n              })\n            }).catch(error => {\n              this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n            });\n          }\n        } else {\n          this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n        }\n      });\n\n      this.$root.$on(\"onWriteComment\", (text, post) => {\n        if (this.user) {\n          if (!text || text.trim().length < 1) {\n            this.$root.$emit(\"onWriteCommentValidationError\", \"Text is empty!\");\n          } else {\n            axios.post(\"/api/1/comments\", {\n              text, post, user: this.user\n            }).then(() => {\n              axios.get(\"/api/1/comments\").then(response => {\n                this.comments = response.data;\n              }).then(() => {\n                this.$root.$emit(\"onLinkToPostPage\", post);\n              })\n            }).catch(error => {\n              this.$root.$emit(\"onWriteCommentValidationError\", error.response.data);\n            });\n          }\n        } else {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n        }\n      });\n\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}